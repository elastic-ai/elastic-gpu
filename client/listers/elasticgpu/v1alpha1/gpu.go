// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "elasticgpu.io/elastic-gpu/apis/elasticgpu/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GPULister helps list GPUs.
// All objects returned here must be treated as read-only.
type GPULister interface {
	// List lists all GPUs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GPU, err error)
	// Get retrieves the GPU from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GPU, error)
	GPUListerExpansion
}

// gPULister implements the GPULister interface.
type gPULister struct {
	indexer cache.Indexer
}

// NewGPULister returns a new GPULister.
func NewGPULister(indexer cache.Indexer) GPULister {
	return &gPULister{indexer: indexer}
}

// List lists all GPUs in the indexer.
func (s *gPULister) List(selector labels.Selector) (ret []*v1alpha1.GPU, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GPU))
	})
	return ret, err
}

// Get retrieves the GPU from the index for a given name.
func (s *gPULister) Get(name string) (*v1alpha1.GPU, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("gpu"), name)
	}
	return obj.(*v1alpha1.GPU), nil
}
