// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "elasticgpu.io/elastic-gpu/apis/elasticgpu/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ElasticGPULister helps list ElasticGPUs.
// All objects returned here must be treated as read-only.
type ElasticGPULister interface {
	// List lists all ElasticGPUs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ElasticGPU, err error)
	// Get retrieves the ElasticGPU from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ElasticGPU, error)
	ElasticGPUListerExpansion
}

// elasticGPULister implements the ElasticGPULister interface.
type elasticGPULister struct {
	indexer cache.Indexer
}

// NewElasticGPULister returns a new ElasticGPULister.
func NewElasticGPULister(indexer cache.Indexer) ElasticGPULister {
	return &elasticGPULister{indexer: indexer}
}

// List lists all ElasticGPUs in the indexer.
func (s *elasticGPULister) List(selector labels.Selector) (ret []*v1alpha1.ElasticGPU, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ElasticGPU))
	})
	return ret, err
}

// Get retrieves the ElasticGPU from the index for a given name.
func (s *elasticGPULister) Get(name string) (*v1alpha1.ElasticGPU, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("elasticgpu"), name)
	}
	return obj.(*v1alpha1.ElasticGPU), nil
}
